/* Generated by "click-buildtool elem2export" on Sun Mar 13 17:41:46 UYT 2016 */

#include <click/config.h>
#include <click/package.hh>
#include "../elements/wifi/filtertx.hh"
#include "../elements/userlevel/fromhost.hh"
#include "../elements/standard/strip.hh"
#include "../elements/wifi/radiotapdecap.hh"
#include "../elements/ip/ipnameinfo.hh"
#include "../elements/wifi/settxrateht.hh"
#include "../elements/empower/empowerdisassocresponder.hh"
#include "../elements/empower/empowerdeauthresponder.hh"
#include "../elements/wifi/printwifi.hh"
#include <click/standard/addressinfo.hh>
#include "../elements/empower/empowerwifiencap.hh"
#include "../elements/wifi/wifidupefilter.hh"
#include "../elements/userlevel/tohost.hh"
#include "../elements/standard/notifierqueue.hh"
#include "../elements/standard/align.hh"
#include "../elements/wifi/wifiseq.hh"
#include "../elements/empower/empowerbeaconsource.hh"
#include "../elements/userlevel/chattersocket.hh"
#include "../elements/userlevel/socket.hh"
#include "../elements/standard/counter.hh"
#include "../elements/userlevel/kernelfilter.hh"
#include "../elements/standard/simplequeue.hh"
#include "../elements/wifi/availablerates.hh"
#include "../elements/empower/empoweropenauthresponder.hh"
#include "../elements/userlevel/todevice.hh"
#include "../elements/empower/empowerlvapmanager.hh"
#include "../elements/wifi/radiotapencap.hh"
#include "../elements/standard/paint.hh"
#include "../elements/empower/empowerassociationresponder.hh"
#include "../elements/empower/empowerpowersavebuffer.hh"
#include "../elements/standard/classifier.hh"
#include "../elements/empower/empowerwifidecap.hh"
#include "../elements/wifi/setchannel.hh"
#include "../elements/empower/empowerresourceelements.hh"
#include "../elements/standard/discard.hh"
#include "../elements/wifi/filterphyerr.hh"
#include "../elements/wifi/settxrate.hh"
#include <click/standard/errorelement.hh>
#include "../elements/empower/empowerrxstats.hh"
#include "../elements/standard/paintswitch.hh"
#include <click/standard/alignmentinfo.hh>
#include "../elements/standard/print.hh"
#include "../elements/standard/priosched.hh"
#include "../elements/userlevel/controlsocket.hh"
#include "../elements/userlevel/fromdevice.hh"
#include <click/standard/scheduleinfo.hh>
#include "../elements/standard/nullelement.hh"
#include "../elements/standard/fullnotequeue.hh"
#include <click/standard/portinfo.hh>
#include "../elements/wifi/minstrel.hh"
CLICK_USING_DECLS
static Element *
beetlemonkey(uintptr_t heywood)
{
  switch (heywood) {
   case 0: return new FilterTX;
   case 1: return new FromHost;
   case 2: return new Strip;
   case 3: return new RadiotapDecap;
   case 4: return new IPNameInfo;
   case 5: return new SetTXRateHT;
   case 6: return new EmpowerDisassocResponder;
   case 7: return new EmpowerDeAuthResponder;
   case 8: return new PrintWifi;
   case 9: return new AddressInfo;
   case 10: return new EmpowerWifiEncap;
   case 11: return new WifiDupeFilter;
   case 12: return new ToHost;
   case 13: return new NotifierQueue;
   case 14: return new Align;
   case 15: return new WifiSeq;
   case 16: return new EmpowerBeaconSource;
   case 17: return new ChatterSocket;
   case 18: return new Socket;
   case 19: return new Counter;
   case 20: return new KernelFilter;
   case 21: return new SimpleQueue;
   case 22: return new AvailableRates;
   case 23: return new EmpowerOpenAuthResponder;
   case 24: return new ToDevice;
   case 25: return new EmpowerLVAPManager;
   case 26: return new RadiotapEncap;
   case 27: return new Paint;
   case 28: return new EmpowerAssociationResponder;
   case 29: return new EmpowerPowerSaveBuffer;
   case 30: return new Classifier;
   case 31: return new EmpowerWifiDecap;
   case 32: return new SetChannel;
   case 33: return new EmpowerResourceElements;
   case 34: return new Discard;
   case 35: return new FilterPhyErr;
   case 36: return new SetTXRate;
   case 37: return new ErrorElement;
   case 38: return new EmpowerRXStats;
   case 39: return new PaintSwitch;
   case 40: return new AlignmentInfo;
   case 41: return new Print;
   case 42: return new PrioSched;
   case 43: return new ControlSocket;
   case 44: return new FromDevice;
   case 45: return new ScheduleInfo;
   case 46: return new NullElement;
   case 47: return new PullNullElement;
   case 48: return new PushNullElement;
   case 49: return new FullNoteQueue;
   case 50: return new FullNoteQueue;
   case 51: return new PortInfo;
   case 52: return new Minstrel;
   default: return 0;
  }
}

#ifdef CLICK_LINUXMODULE
#define click_add_element_type_stable(n, f, t) click_add_element_type_stable((n), (f), (t), 0)
#endif
void
click_export_elements()
{
  (void) click_add_element_type_stable("FilterTX", beetlemonkey, 0);
  (void) click_add_element_type_stable("FromHost", beetlemonkey, 1);
  (void) click_add_element_type_stable("Strip", beetlemonkey, 2);
  (void) click_add_element_type_stable("RadiotapDecap", beetlemonkey, 3);
  (void) click_add_element_type_stable("IPNameInfo", beetlemonkey, 4);
  IPNameInfo::static_initialize();
  (void) click_add_element_type_stable("SetTXRateHT", beetlemonkey, 5);
  (void) click_add_element_type_stable("EmpowerDisassocResponder", beetlemonkey, 6);
  (void) click_add_element_type_stable("EmpowerDeAuthResponder", beetlemonkey, 7);
  (void) click_add_element_type_stable("PrintWifi", beetlemonkey, 8);
  (void) click_add_element_type_stable("AddressInfo", beetlemonkey, 9);
  (void) click_add_element_type_stable("EmpowerWifiEncap", beetlemonkey, 10);
  (void) click_add_element_type_stable("WifiDupeFilter", beetlemonkey, 11);
  (void) click_add_element_type_stable("ToHost", beetlemonkey, 12);
  (void) click_add_element_type_stable("NotifierQueue", beetlemonkey, 13);
  (void) click_add_element_type_stable("Align", beetlemonkey, 14);
  (void) click_add_element_type_stable("WifiSeq", beetlemonkey, 15);
  (void) click_add_element_type_stable("EmpowerBeaconSource", beetlemonkey, 16);
  (void) click_add_element_type_stable("ChatterSocket", beetlemonkey, 17);
  (void) click_add_element_type_stable("Socket", beetlemonkey, 18);
  (void) click_add_element_type_stable("Counter", beetlemonkey, 19);
  (void) click_add_element_type_stable("KernelFilter", beetlemonkey, 20);
  (void) click_add_element_type_stable("SimpleQueue", beetlemonkey, 21);
  (void) click_add_element_type_stable("AvailableRates", beetlemonkey, 22);
  (void) click_add_element_type_stable("EmpowerOpenAuthResponder", beetlemonkey, 23);
  (void) click_add_element_type_stable("ToDevice", beetlemonkey, 24);
  (void) click_add_element_type_stable("EmpowerLVAPManager", beetlemonkey, 25);
  (void) click_add_element_type_stable("RadiotapEncap", beetlemonkey, 26);
  (void) click_add_element_type_stable("Paint", beetlemonkey, 27);
  (void) click_add_element_type_stable("EmpowerAssociationResponder", beetlemonkey, 28);
  (void) click_add_element_type_stable("EmpowerPowerSaveBuffer", beetlemonkey, 29);
  (void) click_add_element_type_stable("Classifier", beetlemonkey, 30);
  (void) click_add_element_type_stable("EmpowerWifiDecap", beetlemonkey, 31);
  (void) click_add_element_type_stable("SetChannel", beetlemonkey, 32);
  (void) click_add_element_type_stable("EmpowerResourceElements", beetlemonkey, 33);
  (void) click_add_element_type_stable("Discard", beetlemonkey, 34);
  (void) click_add_element_type_stable("FilterPhyErr", beetlemonkey, 35);
  (void) click_add_element_type_stable("SetTXRate", beetlemonkey, 36);
  (void) click_add_element_type_stable("Error", beetlemonkey, 37);
  (void) click_add_element_type_stable("EmpowerRXStats", beetlemonkey, 38);
  (void) click_add_element_type_stable("PaintSwitch", beetlemonkey, 39);
  (void) click_add_element_type_stable("AlignmentInfo", beetlemonkey, 40);
  (void) click_add_element_type_stable("Print", beetlemonkey, 41);
  (void) click_add_element_type_stable("PrioSched", beetlemonkey, 42);
  (void) click_add_element_type_stable("ControlSocket", beetlemonkey, 43);
  (void) click_add_element_type_stable("FromDevice", beetlemonkey, 44);
  (void) click_add_element_type_stable("ScheduleInfo", beetlemonkey, 45);
  (void) click_add_element_type_stable("Null", beetlemonkey, 46);
  (void) click_add_element_type_stable("PullNull", beetlemonkey, 47);
  (void) click_add_element_type_stable("PushNull", beetlemonkey, 48);
  (void) click_add_element_type_stable("FullNoteQueue", beetlemonkey, 49);
  (void) click_add_element_type_stable("Queue", beetlemonkey, 50);
  (void) click_add_element_type_stable("PortInfo", beetlemonkey, 51);
  (void) click_add_element_type_stable("Minstrel", beetlemonkey, 52);
  CLICK_DMALLOC_REG("nXXX");
}

void
click_unexport_elements()
{
  IPNameInfo::static_cleanup();
}
